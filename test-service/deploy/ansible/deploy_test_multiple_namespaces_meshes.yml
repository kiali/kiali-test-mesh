- name: Instal Kiali Test Mesh
  hosts: localhost
  vars:
    kiali_test_mesh:
      - kiali-test-depth
      - kiali-test-breadth
      - kiali-test-circle
      - kiali-test-circle-callback
      - kiali-test-hourglass
      - kiali-test-depth-sink
      - kiali-test-breadth-sink
    random: false

  tasks:
    - name: Initialize Variables
      set_fact:
        versions: []
        services: []
        even_services: []
        namespaces: []
        kiali_test_depth_route: ""
        kiali_test_depth_namespace: ""
        kiali_test_breadth_route: ""
        kiali_test_breadth_namespace: ""
        kiali_test_circle_route: ""
        kiali_test_circle_namespace: ""
        kiali_test_circle_callback_route: ""
        kiali_test_circle_callback_namespace: ""
        kiali_test_depth_sink_route: ""
        kiali_test_depth_sink_namespace: ""
        kiali_test_breadth_sink_route: ""
        kiali_test_breadth_sink_namespace: ""

    - name: 'check if number_of_namespaces is greater than number_of_services'
      fail: msg="Please make sure the number_of_services are greater than or equal to number_of_namespaces"
      when: "number_of_namespaces  > number_of_services "


    - name: Generate Versions Array
      set_fact: versions="{{versions}} + ['v{{ item }}']"
      with_sequence: start=1 end={{number_of_versions}} format=%d

    - name: Generate Services Array
      set_fact:
        services="{{services}} + ['{{ item }}']"
      with_sequence: start=1 end={{number_of_services}} format=%d

    - name: Create Service and Namespace Dict
      set_fact:
      args:
        service:
          name: "service-{{ item.0 }}"
          namespace: "{{item.1}}-{{ (item.0 | int) % (number_of_namespaces | int) }}"
          fqdn: "service-{{ item.0 }}.{{item.1}}-{{ (item.0 | int) % (number_of_namespaces | int) }}.svc.cluster.local"
      when: "random == false"
      with_nested:
        - "{{ services }}"
        - "{{ kiali_test_mesh | intersect(meshes) }}"
      register: all_services

    - name: Create All Services List
      set_fact:
        all_services: "{{all_services.results | map(attribute='ansible_facts.service') | list  }}"


    - name: Set Depth route
      vars:
        fqdn_services_depth: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-depth') | list | difference(all_services | map(attribute='fqdn') | select('search', 'kiali-test-depth-sink') | list)}}"
      set_fact:
        kiali_test_depth_route: "http://{{fqdn_services_depth[0]}}/route?path={{ fqdn_services_depth | list | join(',') }}"
        kiali_test_depth_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-depth') | list | first }}"
      when: "'kiali-test-depth' in meshes"

    - name: Set Circle Callback
      vars:
        fqdn_services_circle_callback: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-circle-callback') | list}}"
      set_fact:
        kiali_test_circle_callback_route: "http://{{fqdn_services_circle_callback[0]}}/route?path={{ fqdn_services_circle_callback | join(',') }},{{fqdn_services_circle_callback[0]}};http://{{fqdn_services_circle_callback[0]}}/route?path={{fqdn_services_circle_callback[0]}},{{ fqdn_services_circle_callback | reverse | join(',') }}"
        kiali_test_circle_callback_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-circle-callback') | list | first }}"
      when: "'kiali-test-circle-callback' in meshes"


    # Generate Even Array in order to make it simple to Hourglass
    - name: Generate Hourglass Even Elements Array
      set_fact: even_services="{{even_services}} + ['service-{{ item }}.kiali-test-hourglass-{{ (item.0 | int) % (number_of_namespaces | int) }}.svc.cluster.local']"
      when: "(item | int) %2 == 1 and 'kiali-test-hourglass' in meshes"
      with_sequence: start=1 end={{number_of_services}} format=%d


    # if the mesh is odd number so we subtract one to make it even
    - name: Hourglass Mesh if length is Odd
      vars:
        fqdn_services_hourglass: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-hourglass') | list}}"
      set_fact:
        kiali_test_hourglass_route: "http://{{fqdn_services_hourglass[0]}}/route?path={{  fqdn_services_hourglass | difference([fqdn_services_hourglass[-1]]) | join(',') }};http://{{fqdn_services_hourglass[0]}}/route?path={{  fqdn_services_hourglass | intersect(even_services) | join(',') }}"
        kiali_test_hourglass_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-hourglass') | list | first }}"
      when: (fqdn_services_hourglass | length % 2 == 0) and 'kiali-test-hourglass' in meshes


    - name: Hourglass Mesh if length is Even
      vars:
        fqdn_services_hourglass: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-hourglass') | list}}"
      set_fact:
        kiali_test_hourglass_route: "http://{{fqdn_services_hourglass[0]}}/route?path={{  fqdn_services_hourglass | join(',') }};http://{{fqdn_services_hourglass[0]}}/route?path={{  fqdn_services_hourglass | intersect(even_services) | join(',') }}"
        kiali_test_hourglass_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-hourglass') | list | first }}"
      when: (fqdn_services_hourglass | length % 2 == 1) and 'kiali-test-hourglass' in meshes



    - name: Set Circle route
      vars:
        fqdn_services_circle: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-circle') | list | difference(all_services | map(attribute='fqdn') | select('search', 'kiali-test-circle-callback') | list)}}"
      set_fact:
        kiali_test_circle_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-circle') | list | first }}"
        kiali_test_circle_route: "http://{{fqdn_services_circle[0]}}/route?path={{ fqdn_services_circle | join(',') }},{{fqdn_services_circle[0]}}"
      when: "'kiali-test-circle' in meshes"

    - name: Set Breadth Sink Route
      vars:
        fqdn_services_breadth_sink_route: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-breadth-sink') | list}}"
      set_fact:
        kiali_test_breadth_sink_route: "http://{{fqdn_services_breadth_sink_route[0]}}/route?path={{item}},{{fqdn_services_breadth_sink_route[-1]}};{{kiali_test_breadth_sink_route}}"
        kiali_test_breadth_sink_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-breadth-sink') | list | first }}"
      when: "item != fqdn_services_breadth_sink_route [-1] and 'kiali-test-breadth-sink' in meshes"
      with_items:
        - "{{ fqdn_services_breadth_sink_route | reverse | list }} "

    - name: Set Breadth Route
      vars:
        fqdn_services_breadth_route: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-breadth') | list | difference(all_services | map(attribute='fqdn') | select('search', 'kiali-test-breadth-sink') | list) }}"
      set_fact:
        kiali_test_breadth_route: "http://{{fqdn_services_breadth_route[0]}}/route?path={{item}};{{kiali_test_breadth_route}}"
        kiali_test_breadth_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-breadth') | list | first }}"
      with_items:
        - "{{ fqdn_services_breadth_route | reverse | list  }}"
      when: "'kiali-test-breadth' in meshes"



    - name: Set Depth Sink Route
      vars:
        fqdn_services_depth_sink_route: "{{all_services | map(attribute='fqdn') | select('search', 'kiali-test-depth-sink') | list}}"
      set_fact:
        kiali_test_depth_sink_route: "http://{{fqdn_services_depth_sink_route[0]}}/route?path={{ fqdn_services_depth_sink_route[:(item | int)] | union([fqdn_services_depth_sink_route[-1]]) | join(',') }};{{kiali_test_depth_sink_route}}"
        kiali_test_depth_sink_namespace: "{{all_services | map(attribute='namespace') | select('search', 'kiali-test-depth-sink') | list | first }}"
      when: (item | int) != (number_of_services | int) and 'kiali-test-depth-sink' in meshes
      with_sequence: start={{number_of_services}} end=1 stride=-1 format=%d

    - name: Delete Test Mesh Projects
      openshift_raw:
        api_version: v1
        kind: Project
        name: "{{ item }}"
        state: absent
      ignore_errors: true
      with_items:
        - "{{ all_services | map(attribute='namespace') | list | unique  }}"

    - name: Create Test Mesh Projects
      openshift_raw:
        api_version: v1
        kind: Project
        name: "{{ item }}"
        state: present
      register: projectStatus
      until: projectStatus.changed == true
      retries: 100
      delay: 20
      with_items:
        - "{{ all_services | map(attribute='namespace') | list | unique }}"

    - name: Grant Permissions to each Kiali Test Meshes Projects
      shell: "oc adm policy add-scc-to-user privileged -z default -n {{item}}"
      with_items:
        - "{{ all_services | map(attribute='namespace') | list | unique }}"

    - name: Deploy Kiali Test Meshes Services
      shell: "oc process -f https://raw.githubusercontent.com/kiali/kiali-test-mesh/master/test-service/deploy/openshift/service-template.yaml -p SERVICE_NAME={{ item.name }} | istioctl kube-inject -f - | oc  apply -n {{ item.namespace }} -f -"
      with_items:
        - "{{ all_services }}"

    - name: Deploy Kiali Test Pods
      shell: "oc process -f https://raw.githubusercontent.com/kiali/kiali-test-mesh/master/test-service/deploy/openshift/app-template.yaml -p SERVICE_NAME={{ item.0.name }} -p IMAGE_NAME='kiali/kiali-test-service' -p SERVICE_VERSION={{ item.1 }} -p IMAGE_VERSION=latest | istioctl kube-inject -f - | oc  apply -n {{ item.0.namespace }} -f -"
      with_nested:
      - "{{ all_services }}"
      - "{{ versions }}"

    - name: Wait until all pods are running
      openshift_raw:
        definition:
          apiVersion: v1
          kind: ReplicaSet
          metadata:
            name: "kiali-test-service-{{ item.0.name }}-{{ item.1 }}"
            namespace: "{{ item.0.namespace }}"
          spec:
            selector:
              matchLabels:
                kiali-test: "test-service-{{ item.0.name }}"
      with_nested:
        - "{{ all_services }}"
        - "{{ versions }}"
      register: replicaResult
      until: (replicaResult.result.status.ready_replicas is defined and replicaResult.result.status.ready_replicas == 1) or
           (replicaResult.result.status.readyReplicas is defined and replicaResult.result.status.readyReplicas == 1)
      retries: 100
      delay: 10



    - name: Deploy Traffic Generator ConfigMaps to Kiali Namespaces
      shell: "curl https://raw.githubusercontent.com/kiali/kiali-test-mesh/master/traffic-generator/openshift/traffic-generator-configmap.yaml | DURATION='0s' ROUTE=\"{{item.route}}\" RATE='1'  envsubst | oc apply -n {{item.namespace}} -f -"
      when: "item.mesh in meshes and item.namespace != ''"
      with_items:
        - { namespace: "{{ kiali_test_depth_namespace }}", route: '{{kiali_test_depth_route}}', mesh: "kiali-test-depth" }
        - { namespace: "{{ kiali_test_breadth_namespace }}", route: '{{kiali_test_breadth_route}}', mesh: "kiali-test-breadth" }
        - { namespace: "{{ kiali_test_circle_namespace }}", route: '{{kiali_test_circle_route}}', mesh: "kiali-test-circle" }
        - { namespace: "{{ kiali_test_circle_callback_namespace }}", route: '{{kiali_test_circle_callback_route}}', mesh: "kiali-test-circle-callback" }
        - { namespace: "{{ kiali_test_hourglass_namespace }}", route: '{{kiali_test_hourglass_route}}', mesh: "kiali-test-hourglass" }
        - { namespace: "{{ kiali_test_breadth_sink_namespace }}", route: '{{kiali_test_breadth_sink_route}}', mesh: "kiali-test-breadth-sink" }
        - { namespace: "{{ kiali_test_depth_sink_namespace }}", route: '{{kiali_test_depth_sink_route}}', mesh: "kiali-test-depth-sink" }

    - name: Deploy Trafic Generator
      shell: "curl https://raw.githubusercontent.com/kiali/kiali-test-mesh/master/traffic-generator/openshift/traffic-generator.yaml  | oc apply -n {{item.namespace}} -f -"
      when: "item.mesh in meshes and item.namespace != ''"
      with_items:
        - { namespace: "{{ kiali_test_depth_namespace }}", mesh: "kiali-test-depth" }
        - { namespace: "{{ kiali_test_breadth_namespace }}", mesh: "kiali-test-breadth" }
        - { namespace: "{{ kiali_test_circle_namespace }}", mesh: "kiali-test-circle" }
        - { namespace: "{{ kiali_test_hourglass_namespace }}", mesh: "kiali-test-hourglass"}
        - { namespace: "{{ kiali_test_circle_callback_namespace }}", mesh: "kiali-test-circle-callback" }
        - { namespace: "{{ kiali_test_breadth_sink_namespace }}", mesh: "kiali-test-breadth-sink" }
        - { namespace: "{{ kiali_test_depth_sink_namespace }}", mesh: "kiali-test-depth-sink" }
